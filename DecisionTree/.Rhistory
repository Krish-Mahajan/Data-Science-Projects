heatmap(dataMatrix)
library(dplyr)
hh<-dist(dataMatrix) %>% hclust
?dist
dataMatrixOrdered<-dataMatric[hh$order,]
dataMatrixOrdered<-dataMatrix[hh$order,]
par(mfrow=c(1,3))
par(mfrow=c(1,3))
##Complete Data
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
##Row Means
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab = "Row Mean", ylab = "Row", pch = 19)
## Show the Column means
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
svd1<-svd(scale(dataMatrixOrdered))
View(svd1)
class(svd1)
svd1[1]
svd1[2]
View(svd1$u[,1])
View(svd1$u[,2])
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1], main = "Original Data")
plot(svd1$u[, 1], 40:1, , ylab = "Row", xlab = "First left singular vector",
+ pch = 19)
plot(svd1$v[, 1], xlab = "Column", ylab = "First right singular vector", pch = 19)
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1], main = "Original Data")
plot(svd1$u[, 1], 40:1, , ylab = "Row", xlab = "First left singular vector", pch = 19)
plot(svd1$v[, 1], xlab = "Column", ylab = "First right singular vector", pch = 19)
constantMatrix <- dataMatrixOrdered * 0
View(constantMatrix)
for (i in 1:dim(dataMatrixOrdered)[1]) {
constantMatrix[i, ] <- rep(c(0, 1), each = 5)
}
View(constantMatrix)
data(iris)
library(ggplot2)
names(iris)
View(head(iris))
unique(iris$Species)
table(iris$Species)
inTrain<-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
library(caret)
inTrain<-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
taining<-iris[inTrain,]
testing<-iris[-inTrain,]
training<-iris[inTrain,]
testing<-iris[-inTrain,]
dim(training)
dim(testing)
qplot(Petal.Width,Sepal.Width,colour=Species,data=Training)
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
modFit<-train(Species~.,method="rpart",data=training)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(ozone,package="ElemStatLearn")
ozone<-ozone[order(ozone$ozone),]
head(ozone)
ll <- matrix(NA,nrow=10,ncol=155)
dim(ozonw)[1]
dim(ozone)[1]
dim(ozone)
ss <- sample(1:dim(ozone)[1],replace=T)
dim(ss)
View(ss)
View(ozone[ss,])
for(i in 1:10){
ss <- sample(1:dim(ozone)[1],replace=T)
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
View(ll)
View(ozone)
plot(ozone$ozone,ozone$temperature,pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
lines(1:155,apply(ll,2,mean),col="red",lwd=2)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
suppressMessages(library(caret)
)
inTrain <- createDataPartition(y = segmentationOriginal$Case, p = 0.6,
list = FALSE) # 60% training
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
set.seed(125)
modFit <- train(Class ~ ., method = "rpart", data = training)
suppressMessages(library(rattle))
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
install.packages("pgmm")
data(olive)
olive = olive[,-1]
library(pgmm)
data(olive)
olive = olive[,-1]
View(olive)
modolive <- train(Area ~ ., method = "rpart", data = olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modolive, newdata = newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1], size = dim(SAheart)[1] / 2, replace = F)
trainSA = SAheart[train, ]
testSA = SAheart[-train, ]
missClass = function(values, prediction){sum(((prediction > 0.5) * 1) != values) / length(values)}
set.seed(13234)
modelSA <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass(testSA$chd, predict(modelSA, newdata = testSA)
)
missClass(trainSA$chd, predict(modelSA, newdata = trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(ElemStatLearn)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
library(randomForest)
library(randomForest)
modvowel <- randomForest(y ~ ., data = vowel.train)
order(varImp(modvowel), decreasing = T)
?createFolds
data(oil)
install.packages("kLar")
y
install.packages("klar")
library(caret)
install.packages("klaR")
library(caret)
data(iris)
train_control <- trainControl(method="boot", number=100)
class(train_control)
View(train_control)
head(train_control)
?sample
?matrix
expenses<-c(850,861,1140,931,972)
mean(expenses)
950.8-600
x1=pnorm(10)
x2=x1+pnorm(10)
x3=x2+pnorm(10)
m<-cbind(x1,x2,x3)
cov(m)
x1
x1=rnorm(10)
x2=x1+rnorm(10)
x3=x2+rnorm(10)
m<-cbind(x1,x2,x3)
cov(m)
cov<-cov(m)
cov
load("MASS")
install.packages("MASS")
install.packages("MASS")
load('MASS')
load("MASS")
library("MASS")
cov
ginv(cov)
x1<-rnorm(10)
x2<-x1+rnorm(10)
x3<-x2+rnorm(10)
x4<-x3+rnorm(10)
m<-cbind(x1,x2,x3,x4)
cov(m)
ginv(m)
cor(x1,x1)
cor(x1,x2)
cov(x1,x2)
?rexp
rexp(1,3)
rexp(1,3)
rexp(5,3)
sum(rexp(5,3))
totalTime<-0
n<-0
while(totalTime<=0){
t=rexp(1,3)
n=n+1
totalTime=totalTime+t
}
n
totalTime<-0
n<-0
while(totalTime<=0){
t=rexp(1,3)
n=n+1
totalTime=totalTime+t
}
n
totalTime<-0
n<-0
while(totalTime<=1){
t=rexp(1,3)
n=n+1
totalTime=totalTime+t
}
n
1:10
count<-c()
count<-c()
for ( i in 1:10){
totalTime<-0
n<-0
while(totalTime<=1){
t=rexp(1,3)
n=n+1
totalTime=totalTime+t
}
count<-c(count,n)
}
count
f<-function(){
count<-c()
for ( i in 1:10000){
totalTime<-0
n<-0
while(totalTime<=1){
t=rexp(1,3)
n=n+1
totalTime=totalTime+t
}
count<-c(count,n)
}
return count
}
f<-function(){
count<-c()
for ( i in 1:10000){
totalTime<-0
n<-0
while(totalTime<=1){
t=rexp(1,3)
n=n+1
totalTime=totalTime+t
}
count<-c(count,n)
}
return (count)
}
data.observation<-f()
plot(data.observation)
View(data.observation)
data.observation.order<-sort(data.observation)
max(data.observation.order)
min(data.observation.order)
x<-1:12
x[1]
library(dplyr)
data.observation.order==1
length(data.observation.order==1)
class(data.observation)
class(data.observation)<-data.frame
data<-data.observation.order
max(data)
pmf<-function(data){
frequency<-c()
for (i in 1:max(data)){
n<-0
for (j in 1:10000){
if(data[j]==i){n<-n+1}
}
frequency<-c(frequency,n/10000)
}
return (frequency)
}
x<-pmf(data)
x
plot(1:12,x)
plot(1:12,x,type="l")
prob<-pmf(data)
plot(1:max(data),prob,type="s",main="PMF of no. of events",xlab="count of events",ylab="frequency")
length(prob)
prob[1]
ecdf<-func(prob){
cumm.prob<-c()
x<-0
for (i in 1:length(prob)){
x<-x+prob[i]
cumm.prob<-c(cumm.prob,x)
}
return cumm.prob
}
ecdf<-func(prob){
cumm.prob<-c()
x<-0
for (i in 1:length(prob)){
x<-x+prob[i]
cumm.prob<-c(cumm.prob,x)
}
return (cumm.prob)
}
ecdf<-function(prob){
cumm.prob<-c()
x<-0
for (i in 1:length(prob)){
x<-x+prob[i]
cumm.prob<-c(cumm.prob,x)
}
return (cumm.prob)
}
cumm.prob<-ecdf(prob)
plot(1:max(data),cumm.prob)
plot(1:max(data),cumm.prob,type="s")
plot(1:max(data),cumm.prob,type="s",xlab="count of events in [0,1] time",main="ecdf",ylab="probability")
data<-rpois(10000,3)
data.ordered<-sort(data)
plot(data.ordered,ppois(data.ordered,3),type="l",main="poisson distribution with lambda=3")
plot(1:max(data),cumm.prob,type="s",xlab="count of events in [0,1] time",main="ecdf",ylab="probability",col="green")
data.observation<-f()
data.observation.order<-sort(data.observation)
data<-data.observation.order
pmf<-function(data){
frequency<-c()
for (i in 1:max(data)){
n<-0
for (j in 1:10000){
if(data[j]==i){n<-n+1}
}
frequency<-c(frequency,n/10000)
}
return (frequency)
}
prob<-pmf(data)
plot(1:max(data),prob,type="s",main="PMF of no. of events",xlab="count of events in [0,1]",ylab="frequency")
ecdf<-function(prob){
cumm.prob<-c()
x<-0
for (i in 1:length(prob)){
x<-x+prob[i]
cumm.prob<-c(cumm.prob,x)
}
return (cumm.prob)
}
cumm.prob<-ecdf(prob)
plot(1:max(data),cumm.prob,type="s",xlab="count of events in [0,1] time",main="ecdf",ylab="probability",col="green")
data.pois<-rpois(10000,3)
data.pois.ordered<-sort(data)
lines(data.pois.ordered,ppois(data.ordered,3),type="l",main="poisson distribution with lambda=3",col="red")
plot(1:max(data),cumm.prob,type="s",xlab="count of events in [0,1] time",main="ecdf",ylab="probability",col="green")
lines(data.pois.ordered,ppois(data.ordered,3),type="s",main="poisson distribution with lambda=3",col="red")
lines(data.pois.ordered,ppois(data.ordered,3),type="l",main="poisson distribution with lambda=3",col="red")
plot(1:max(data),cumm.prob,type="s",xlab="count of events in [0,1] time",main="ecdf",ylab="probability",col="green")
lines(data.pois.ordered,ppois(data.ordered,3),main="poisson distribution with lambda=3",col="red")
data.pois<-rpois(10000,3)
data.pois.ordered<-sort(data)
plot(1:max(data),cumm.prob,type="s",xlab="count of events in [0,1] time",main="ecdf",ylab="probability",col="green")
lines(data.pois.ordered,ppois(data.ordered,3),main="poisson distribution with lambda=3",col="red")
plot(data.pois.ordered,ppois(data.ordered,3),main="poisson distribution with lambda=3",col="red")
plot(1:max(data),cumm.prob,type="s",xlab="count of events in [0,1] time",main="ecdf",ylab="probability",col="green")
plot(data.pois.ordered,ppois(data.pois.ordered,3),type="l",main="poisson distribution with lambda=3",col="red")
plot(1:max(data),cumm.prob,type="s",xlab="count of events in [0,1] time",main="ecdf",ylab="probability",col="green")
lines(data.pois.ordered,ppois(data.pois.ordered,3),type="l",main="poisson distribution with lambda=3",col="red")
?ppois
plot(1:max(data),prob,type="s",main="PMF of no. of events",xlab="count of events in [0,1]",ylab="frequency")
lines(data.pois.ordered,dpois(data.pois.ordered,3),type="l",main="poisson distribution with lambda=3",col="red")
lines(data.pois.ordered,ppois(data.pois.ordered,3),type="l",main="poisson distribution with lambda=3",col="red")
data.pois<-rpois(10000,3)
data.pois<-rpois(10000,3)
data.pois.ordered<-sort(data.pois)
plot(data.pois.ordered,ppois(data.pois.ordered,3),type="l",main="poisson distribution with lambda=3",col="red")
plot(transform_data.ordered,cummulative_prob,type="l",main="Binomial Approxing Gaussian for large N",col="red")
lines(transform_data.ordered,pnorm(transform_data.ordered),col="green")
legend("topright",
inset=.05,
cex = 1,
title="Legend",
c("Binomial","Gaussian"),
horiz=TRUE,
lty=c(1,1),
lwd=c(2,2),
col=c("green","red"),
bg="grey96")
legend("topright",
inset=.1,
cex = 1,
title="Legend",
c("Binomial","Gaussian"),
horiz=TRUE,
lty=c(1,1),
lwd=c(2,2),
col=c("green","red"),
bg="grey96")
hist(rbinom(runif(10000),500,0.5),xlab="no. of heads",main="Tossing 500 coins 10K times")
data= rbinom(runif(10000),500,0.5)
transform_data=(data-mean(data))/sd(data)
mean(transform_data)
sd(transform_data)
transform_data.ordered=sort(transform_data)
cummulative_prob=(1:10000/(10000))
plot(transform_data.ordered,cummulative_prob,type="l",main="CDF of Random Variables in part b",col="red")
plot(transform_data.ordered,cummulative_prob,type="l",main="Binomial Approxing Gaussian for large N",col="red")
lines(transform_data.ordered,pnorm(transform_data.ordered),col="green")
legend("topright",
inset=.1,
cex = 1,
title="Legend",
c("Binomial","Gaussian"),
horiz=TRUE,
lty=c(1,1),
lwd=c(2,2),
col=c("red","green"),
bg="grey96")
legend("topright",
inset=.1,
cex = 1,
title="Legend",
c("Binomial","Gaussian"),
horiz=TRUE,
lty=c(1,1),
lwd=c(4,4),
col=c("red","green"),
bg="grey96")
legend("topright",
inset=.1,
cex = 1,
title="Legend",
c("Binomial","Gaussian"),
horiz=TRUE,
lty=c(1,1),
lwd=c(10,10),
col=c("red","green"),
bg="grey96")
plot(transform_data.ordered,cummulative_prob,type="l",main="Binomial Approxing Gaussian for large N",col="red")
lines(transform_data.ordered,pnorm(transform_data.ordered),col="green")
legend("topright",
inset=.1,
cex = 1,
title="Legend",
c("Binomial","Gaussian"),
horiz=FALSE,
lty=c(1,1),
lwd=c(2,2),
col=c("red","green"),
bg="grey96")
plot(transform_data.ordered,cummulative_prob,type="l",main="Binomial Approxing Gaussian for large N",col="red")
lines(transform_data.ordered,pnorm(transform_data.ordered),col="green")
legend("topright",
inset=.1,
cex = 2,
title="Legend",
c("Binomial","Gaussian"),
horiz=FALSE,
lty=c(1,1),
lwd=c(2,2),
col=c("red","green"),
bg="grey96")
plot(transform_data.ordered,cummulative_prob,type="l",main="Binomial Approxing Gaussian for large N",col="red")
lines(transform_data.ordered,pnorm(transform_data.ordered),col="green")
legend("bottomright",
inset=.1,
cex = 1,
title="Legend",
c("Binomial","Gaussian"),
horiz=FALSE,
lty=c(1,1),
lwd=c(2,2),
col=c("red","green"),
bg="grey96")
data.observation<-f()
data.observation.order<-sort(data.observation)
data<-data.observation.order
prob<-pmf(data)
plot(1:max(data),prob,type="s",main="PMF of no. of events",xlab="count of events in [0,1]",ylab="frequency",col="green")
data.pois<-rpois(10000,3)
data.pois.ordered<-sort(data.pois)
lines(data.pois.ordered,dpois(data.pois.ordered,3),type="l",main="poisson distribution with lambda=3",col="red")
legend("bottomright",
inset=.1,
cex = 1,
title="Legend",
c("poisson","exponential"),
horiz=FALSE,
lty=c(1,1),
lwd=c(2,2),
col=c("red","green"),
bg="grey96")
data.pois<-rpois(10000,3)
data.pois.ordered<-sort(data.pois)
lines(data.pois.ordered,dpois(data.pois.ordered,3),type="l",main="poisson distribution with lambda=3",col="red")
legend("topright",
inset=.1,
cex = 1,
title="Legend",
c("poisson","exponential"),
horiz=FALSE,
lty=c(1,1),
lwd=c(2,2),
col=c("red","green"),
bg="grey96")
setwd("C:/Users/Krish/Google Drive/Coursera/coursera/Projects/DecisionTree")
render("assignment2.Rmd", "pdf_document")
getwd()
0.25*(151)
29/150
39/150
5/18
2/9
3/8
(4/9)+(3/8)
3.25/4
0.81*3
30-2.43
(1.5*1)/2
